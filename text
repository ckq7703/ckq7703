from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from pymodbus.server.sync import StartTcpServer
from pymodbus.device import ModbusDeviceIdentification
from pymodbus.transaction import ModbusRtuFramer, ModbusAsciiFramer
import logging
from threading import Timer

# Cấu hình logging để theo dõi hoạt động
logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.INFO)

# Tạo datastore (nơi lưu trữ dữ liệu modbus)
store = ModbusSlaveContext(
    di=ModbusSlaveContext(0x00, values=[17]*100),  # Input Discretes
    co=ModbusSlaveContext(0x00, values=[17]*100),  # Coils
    hr=ModbusSlaveContext(0x00, values=[0]*100),   # Holding Registers
    ir=ModbusSlaveContext(0x00, values=[17]*100),  # Input Registers
    zero_mode=True
)

# Tạo context Modbus với datastore
context = ModbusServerContext(slaves=store, single=True)

# Khởi tạo đối tượng nhận dạng thiết bị (có thể để mặc định)
identity = ModbusDeviceIdentification()
identity.VendorName = 'ModbusServer'
identity.ProductCode = 'SCADA'
identity.VendorUrl = 'http://github.com/riptideio/pymodbus/'
identity.ProductName = 'Modbus Server'
identity.ModelName = 'Modbus Server'
identity.MajorMinorRevision = '1.0'

# Hàm cập nhật dữ liệu khi client ghi vào server
def updating_writer(a):
    context = a[0]
    register = 1  # Holding Register (index 1)
    slave_id = 0x00  # Slave ID
    values = context[slave_id].getValues(register, 10)  # Lấy 10 giá trị

    # Chuyển đổi các giá trị thành chuỗi ký tự từ client gửi lên
    received_message = ''.join(chr(v) for v in values)
    log.info(f"Received data from client: {received_message}")

# In dữ liệu nhận được từ client mỗi 5 giây
def update_data():
    context = store.getValues(3, 1, count=10)
    # In ra giá trị của các Holding Register
    message = ''.join(chr(v) for v in context)
    print(f"Dữ liệu hiện tại trên server: {message}")
    Timer(5.0, update_data).start()

# Bắt đầu lắng nghe
if __name__ == "__main__":
    # Khởi động server Modbus
    print("Modbus Server is starting...")

    # Hàm định kỳ kiểm tra dữ liệu
    update_data()

    # Khởi động server TCP với IP và Port
    StartTcpServer(context, identity=identity, address=("172.168.1.11", 502))



---------------------------------
from pymodbus.client.sync import ModbusTcpClient
import time

# Địa chỉ IP của Modbus Server (Kali-A0)
SERVER_IP = '172.168.1.11'
SERVER_PORT = 502

# Khởi tạo Client kết nối đến Modbus Server
client = ModbusTcpClient(SERVER_IP, port=SERVER_PORT)

# Hàm gửi dữ liệu với số thứ tự
def send_data(counter):
    # Nội dung dữ liệu gửi đi
    data = f'Dữ liệu được gửi từ hệ thống SCADA #{counter}'
    
    # Mã hóa dữ liệu thành chuỗi giá trị 16-bit để gửi qua Modbus (holding registers)
    register_values = [ord(char) for char in data]  # Mỗi ký tự thành mã ASCII
    
    # Gửi dữ liệu qua Modbus (ghi vào holding registers từ vị trí 1)
    client.write_registers(1, register_values)
    print(f'Đã gửi: {data}')

# Vòng lặp gửi dữ liệu nhiều lần
counter = 1
while True:
    send_data(counter)
    counter += 1
    time.sleep(5)  # Gửi dữ liệu mỗi 5 giây
