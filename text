from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from pymodbus.server import StartTcpServer
from pymodbus.device import ModbusDeviceIdentification
import logging

# Cấu hình logging để theo dõi hoạt động
logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.INFO)

# Tạo một danh sách 100 holding registers với giá trị mặc định là 0
holding_registers = [0] * 100

# Tạo datastore với holding registers
store = ModbusSlaveContext(
    hr=holding_registers,  # Holding Registers
)

# Tạo context Modbus với datastore
context = ModbusServerContext(slaves=store, single=True)

# Khởi tạo đối tượng nhận dạng thiết bị
identity = ModbusDeviceIdentification()
identity.VendorName = 'ModbusServer'
identity.ProductCode = 'SCADA'
identity.ProductName = 'Modbus Server'

# Hàm in dữ liệu khi client ghi vào server
def updating_writer(context):
    register = 1  # Holding Register (index 1)
    values = context[0x00].getValues(register, 10)  # Lấy 10 giá trị

    # Chuyển đổi giá trị thành chuỗi ký tự và in ra
    received_message = ''.join(chr(v) for v in values if v != 0)
    log.info(f"Received data from client: {received_message}")

# Bắt đầu lắng nghe
if __name__ == "__main__":
    print("Modbus Server is starting...")
    
    # Khởi động server TCP với IP và Port
    StartTcpServer(context=context, identity=identity, address=("172.168.1.11", 502))







---------------------------------
from pymodbus.client import ModbusTcpClient
import time

# Khởi tạo Modbus client với địa chỉ IP của server
client = ModbusTcpClient('172.168.1.11')

def send_data(counter):
    message = f"Dữ liệu được gửi từ hệ thống SCADA #{counter}"
    
    # Chuyển chuỗi ký tự thành danh sách các giá trị ASCII
    register_values = [ord(c) for c in message]
    
    # Gửi các giá trị tới Holding Register (index 1)
    client.write_registers(1, register_values)
    print(f"Sent: {message}")

if client.connect():
    counter = 0
    try:
        while True:
            counter += 1
            send_data(counter)
            time.sleep(5)  # Gửi dữ liệu mỗi 5 giây
    except KeyboardInterrupt:
        print("Stopped by user")
    finally:
        client.close()
else:
    print("Connection failed")


